import { {{name}} } from '~/composables/{{name}}/{{name}}';
import { mockNuxtImport } from '@nuxt/test-utils/runtime';

// Mock the SDK
mockNuxtImport('useSdk', () => () => ({
  plentysystems: {
    get{{pascalCase (composableBaseName name)}}: vi.fn().mockResolvedValue({
      data: { id: 1, name: 'Test {{humanCase (composableBaseName name)}}' }
    })
  }
}));

describe('{{name}}', () => {
  it('should initialize with correct default state', () => {
    const { data, loading, error } = {{name}}('test-id');

    expect(data.value).toBe(null);
    expect(loading.value).toBe(false);
    expect(error.value).toBe(null);
  });

  it('should fetch {{humanCase (composableBaseName name)}} data successfully', async () => {
    const { fetch, data, loading } = {{name}}('test-id');

    expect(loading.value).toBe(false);
    
    await fetch({ id: 1 });

    expect(data.value).toEqual({ id: 1, name: 'Test {{humanCase (composableBaseName name)}}' });
    expect(loading.value).toBe(false);
  });

  it('should fetch {{humanCase (composableBaseName name)}} data on server', async () => {
    const { fetchServer, data, loading } = {{name}}('test-id');

    expect(loading.value).toBe(false);
    
    await fetchServer({ id: 1 });

    expect(data.value).toEqual({ id: 1, name: 'Test {{humanCase (composableBaseName name)}}' });
    expect(loading.value).toBe(false);
  });

  it('should handle errors properly', async () => {
    const { fetch, error } = {{name}}('test-id');
    
    // Mock SDK to throw error
    const mockSdk = vi.mocked(useSdk);
    mockSdk().plentysystems.get{{pascalCase (composableBaseName name)}}.mockRejectedValueOnce(new Error('API Error'));

    await fetch({ id: 1 });

    expect(error.value).toBeTruthy();
  });
});
