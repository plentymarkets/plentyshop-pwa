import type { ApiError } from '@plentymarkets/shop-api';
import type { {{pascalCase name}}State } from './types';

/**
 * @description Composable for managing {{humanCase (composableBaseName name)}} data
 * @param {{camelCase (composableBaseName name)}}Id - Unique identifier for the {{humanCase (composableBaseName name)}}
 * @returns {{pascalCase name}} composable interface
 * @example
 * ``` ts
 * const { data, loading, error, fetch, fetchServer } = {{name}}('unique-id');
 * ```
 */
export const {{name}} = ({{camelCase (composableBaseName name)}}Id: string) => {
  const state = useState<{{pascalCase name}}State>('{{name}}-' + {{camelCase (composableBaseName name)}}Id, () => ({
    data: null,
    loading: false,
    error: null,
  }));

  // TODO: Replace with actual SDK method call
  // SDK method call - reused by both fetch methods
  const sdkCall = (params: unknown) =>
    useSdk().plentysystems.get{{pascalCase (composableBaseName name)}}(params);

  /**
   * @description Client-side fetch method
   * @param params - Parameters for fetching {{humanCase (composableBaseName name)}} data
   * @returns Promise<unknown | null>
   */
  const fetch = async (params: unknown) => {
    try {
      state.value.loading = true;
      state.value.error = null;
      const data = await sdkCall(params);
      state.value.data = data.data;
      state.value.loading = false;
      return data.data;
    } catch (error: unknown) {
      useHandleError(error as ApiError);
      state.value.error = error as ApiError | null;
      state.value.loading = false;
      return null;
    }
  };

  /**
   * @description Server-side fetch method with useAsyncData
   * @param params - Parameters for fetching {{humanCase (composableBaseName name)}} data
   * @returns Promise<any | null>
   */
  const fetchServer = async (params: unknown) => {
    state.value.loading = true;
    state.value.error = null;

    const { data, error } = await useAsyncData(
      '{{name}}-' + {{camelCase (composableBaseName name)}}Id + '-' + JSON.stringify(params),
      () => sdkCall(params)
    );

    useHandleError(error.value);

    state.value.data = data.value?.data || null;
    state.value.error = error.value;
    state.value.loading = false;

    return state.value.data;
  };

  return {
    fetch,
    fetchServer,
    ...toRefs(state.value),
  };
};
